// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.EfCore;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(CustomContext))]
    partial class CustomContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Models.Song", b =>
                {
                    b.Property<string>("SongToken")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Listenings")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SongToken");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("WebApplication1.Models.SongFile", b =>
                {
                    b.Property<string>("SongToken")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("SongToken");

                    b.ToTable("SongFiles");
                });

            modelBuilder.Entity("WebApplication1.Models.SongFile", b =>
                {
                    b.HasOne("WebApplication1.Models.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongToken")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");
                });
#pragma warning restore 612, 618
        }
    }
}
